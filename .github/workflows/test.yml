name: Test AsyncAPI Rust Template

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-template:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
        rust-version: [stable, 1.70.0]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Setup Rust ${{ matrix.rust-version }}
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust-version }}
        override: true
        components: rustfmt, clippy

    - name: Install AsyncAPI CLI
      run: npm install -g @asyncapi/cli

    - name: Install template dependencies
      run: npm install

    - name: Lint template files
      run: npm run lint

    - name: Test template generation - Simple example
      run: |
        cd examples/simple
        npx @asyncapi/cli generate fromTemplate asyncapi.yaml ../../ \
          --output ../../test-output/simple \
          --param packageName="simple-test" \
          --force-write

    - name: Test template generation - MQTT example
      run: |
        cd examples/mqtt
        npx @asyncapi/cli generate fromTemplate asyncapi.yaml ../../ \
          --output ../../test-output/mqtt \
          --param packageName="mqtt-test" \
          --param enableMetrics=true \
          --force-write

    - name: Test template generation - Multi-protocol example
      run: |
        cd examples/multi-protocol
        npx @asyncapi/cli generate fromTemplate asyncapi.yaml ../../ \
          --output ../../test-output/multi-protocol \
          --param packageName="multi-protocol-test" \
          --param enableMetrics=true \
          --param enableTracing=true \
          --force-write

    - name: Check generated Rust code - Simple
      run: |
        cd test-output/simple
        cargo check
        cargo clippy -- -D warnings
        cargo fmt -- --check

    - name: Check generated Rust code - MQTT
      run: |
        cd test-output/mqtt
        cargo check
        cargo clippy -- -D warnings
        cargo fmt -- --check

    - name: Check generated Rust code - Multi-protocol
      run: |
        cd test-output/multi-protocol
        cargo check
        cargo clippy -- -D warnings
        cargo fmt -- --check

    - name: Build generated projects
      run: |
        cd test-output/simple && cargo build
        cd ../mqtt && cargo build
        cd ../multi-protocol && cargo build

    - name: Run tests on generated projects
      run: |
        cd test-output/simple && cargo test
        cd ../mqtt && cargo test
        cd ../multi-protocol && cargo test

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-output-${{ matrix.node-version }}-${{ matrix.rust-version }}
        path: test-output/

  test-features:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install AsyncAPI CLI
      run: npm install -g @asyncapi/cli

    - name: Install template dependencies
      run: npm install

    - name: Test with all features enabled
      run: |
        cd examples/simple
        npx @asyncapi/cli generate fromTemplate asyncapi.yaml ../../ \
          --output ../../test-output/all-features \
          --param packageName="all-features-test" \
          --param enableMetrics=true \
          --param enableTracing=true \
          --param enableAuth=true \
          --param enableConnectionPooling=true \
          --param enableBatching=true \
          --param enableDynamicConfig=true \
          --param enableFeatureFlags=true \
          --force-write

    - name: Check all features build
      run: |
        cd test-output/all-features
        cargo check --all-features
        cargo build --all-features

  validate-template:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Validate package.json
      run: |
        node -e "
          const pkg = require('./package.json');
          if (!pkg.generator) throw new Error('Missing generator config');
          if (!pkg.generator.supportedProtocols) throw new Error('Missing supported protocols');
          if (!pkg.generator.parameters) throw new Error('Missing parameters');
          console.log('✅ Package.json validation passed');
        "

    - name: Validate template structure
      run: |
        if [ ! -d "template" ]; then
          echo "❌ Missing template directory"
          exit 1
        fi
        if [ ! -f "template/index.js" ]; then
          echo "❌ Missing template/index.js"
          exit 1
        fi
        if [ ! -f "README.md" ]; then
          echo "❌ Missing README.md"
          exit 1
        fi
        if [ ! -f "LICENSE" ]; then
          echo "❌ Missing LICENSE"
          exit 1
        fi
        echo "✅ Template structure validation passed"

    - name: Check examples exist
      run: |
        if [ ! -d "examples" ]; then
          echo "❌ Missing examples directory"
          exit 1
        fi
        if [ ! -f "examples/simple/asyncapi.yaml" ]; then
          echo "❌ Missing simple example"
          exit 1
        fi
        echo "✅ Examples validation passed"

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Run npm audit
      run: npm audit --audit-level=moderate

    - name: Check for security vulnerabilities in generated code
      run: |
        cd examples/simple
        npx @asyncapi/cli generate fromTemplate asyncapi.yaml ../../ \
          --output ../../test-output/security-check \
          --param packageName="security-test" \
          --force-write
        cd ../../test-output/security-check
        cargo audit || echo "Cargo audit completed"
