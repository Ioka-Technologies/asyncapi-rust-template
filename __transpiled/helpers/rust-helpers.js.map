{"version":3,"file":"rust-helpers.js","sources":["../../template/helpers/rust-helpers.js"],"sourcesContent":["/**\n * Rust-specific helper functions for AsyncAPI template generation\n */\n\n/**\n * Converts a string to a valid Rust identifier\n * @param {string} str - The string to convert\n * @returns {string} - A valid Rust identifier\n */\nfunction toRustIdentifier(str) {\n    if (!str) return 'unknown';\n\n    // Replace invalid characters with underscores\n    let identifier = str\n        .replace(/[^a-zA-Z0-9_]/g, '_')\n        .replace(/^[0-9]/, '_$&') // Prefix numbers with underscore\n        .replace(/_+/g, '_') // Collapse multiple underscores\n        .replace(/^_+|_+$/g, ''); // Remove leading/trailing underscores\n\n    // Ensure it doesn't start with a number\n    if (/^[0-9]/.test(identifier)) {\n        identifier = 'item_' + identifier;\n    }\n\n    // Ensure it's not empty\n    if (!identifier) {\n        identifier = 'unknown';\n    }\n\n    // Avoid Rust keywords\n    const rustKeywords = [\n        'as', 'break', 'const', 'continue', 'crate', 'else', 'enum', 'extern',\n        'false', 'fn', 'for', 'if', 'impl', 'in', 'let', 'loop', 'match',\n        'mod', 'move', 'mut', 'pub', 'ref', 'return', 'self', 'Self',\n        'static', 'struct', 'super', 'trait', 'true', 'type', 'unsafe',\n        'use', 'where', 'while', 'async', 'await', 'dyn'\n    ];\n\n    if (rustKeywords.includes(identifier)) {\n        identifier = identifier + '_';\n    }\n\n    return identifier;\n}\n\n/**\n * Converts a string to a valid Rust type name (PascalCase)\n * @param {string} str - The string to convert\n * @returns {string} - A valid Rust type name\n */\nfunction toRustTypeName(str) {\n    if (!str) return 'Unknown';\n\n    const identifier = toRustIdentifier(str);\n\n    // Convert to PascalCase\n    return identifier\n        .split('_')\n        .map(part => part.charAt(0).toUpperCase() + part.slice(1).toLowerCase())\n        .join('');\n}\n\n/**\n * Converts a string to a valid Rust field name (snake_case)\n * @param {string} str - The string to convert\n * @returns {string} - A valid Rust field name\n */\nfunction toRustFieldName(str) {\n    if (!str) return 'unknown';\n\n    const identifier = toRustIdentifier(str);\n\n    // Convert to snake_case\n    return identifier\n        .replace(/([A-Z])/g, '_$1')\n        .toLowerCase()\n        .replace(/^_/, '')\n        .replace(/_+/g, '_');\n}\n\n/**\n * Converts a string to a valid Rust module name (snake_case)\n * @param {string} str - The string to convert\n * @returns {string} - A valid Rust module name\n */\nfunction toRustModuleName(str) {\n    return toRustFieldName(str);\n}\n\n/**\n * Gets the Rust type for a JSON Schema type\n * @param {object} schema - The JSON Schema\n * @returns {string} - The corresponding Rust type\n */\nfunction getRustType(schema) {\n    if (!schema) return 'serde_json::Value';\n\n    const type = schema.type && schema.type();\n\n    switch (type) {\n    case 'string':\n        return 'String';\n    case 'integer':\n        return 'i64';\n    case 'number':\n        return 'f64';\n    case 'boolean':\n        return 'bool';\n    case 'array': {\n        const items = schema.items && schema.items();\n        if (items) {\n            return `Vec<${getRustType(items)}>`;\n        }\n        return 'Vec<serde_json::Value>';\n    }\n    case 'object':\n        return 'serde_json::Value'; // For now, use generic JSON value\n    default:\n        return 'serde_json::Value';\n    }\n}\n\n/**\n * Gets the default port for a protocol\n * @param {string} protocol - The protocol name\n * @returns {number} - The default port\n */\nfunction getDefaultPort(protocol) {\n    switch (protocol?.toLowerCase()) {\n    case 'mqtt':\n    case 'mqtts':\n        return 1883;\n    case 'kafka':\n    case 'kafka-secure':\n        return 9092;\n    case 'amqp':\n    case 'amqps':\n        return 5672;\n    case 'ws':\n    case 'wss':\n        return 8080;\n    case 'http':\n        return 80;\n    case 'https':\n        return 443;\n    default:\n        return 8080;\n    }\n}\n\nmodule.exports = {\n    toRustIdentifier,\n    toRustTypeName,\n    toRustFieldName,\n    toRustModuleName,\n    getRustType,\n    getDefaultPort\n};\n"],"names":["toRustIdentifier","str","identifier","replace","test","rustKeywords","includes","toRustTypeName","split","map","part","charAt","toUpperCase","slice","toLowerCase","join","toRustFieldName","toRustModuleName","getRustType","schema","type","items","getDefaultPort","protocol","module","exports"],"mappings":"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"}