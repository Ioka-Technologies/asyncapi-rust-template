{"version":3,"file":"config.rs.js","sources":["../../template/src/config.rs.js"],"sourcesContent":["export default function ConfigRs({ asyncapi }) {\n    // Helper functions for Rust identifier generation\n    function toRustIdentifier(str) {\n        if (!str) return 'unknown';\n        let identifier = str\n            .replace(/[^a-zA-Z0-9_]/g, '_')\n            .replace(/^[0-9]/, '_$&')\n            .replace(/_+/g, '_')\n            .replace(/^_+|_+$/g, '');\n        if (/^[0-9]/.test(identifier)) {\n            identifier = 'item_' + identifier;\n        }\n        if (!identifier) {\n            identifier = 'unknown';\n        }\n        const rustKeywords = [\n            'as', 'break', 'const', 'continue', 'crate', 'else', 'enum', 'extern',\n            'false', 'fn', 'for', 'if', 'impl', 'in', 'let', 'loop', 'match',\n            'mod', 'move', 'mut', 'pub', 'ref', 'return', 'self', 'Self',\n            'static', 'struct', 'super', 'trait', 'true', 'type', 'unsafe',\n            'use', 'where', 'while', 'async', 'await', 'dyn'\n        ];\n        if (rustKeywords.includes(identifier)) {\n            identifier = identifier + '_';\n        }\n        return identifier;\n    }\n\n    function toRustTypeName(str) {\n        if (!str) return 'Unknown';\n        const identifier = toRustIdentifier(str);\n        return identifier\n            .split('_')\n            .map(part => part.charAt(0).toUpperCase() + part.slice(1).toLowerCase())\n            .join('');\n    }\n\n    function toRustFieldName(str) {\n        if (!str) return 'unknown';\n        const identifier = toRustIdentifier(str);\n        return identifier\n            .replace(/([A-Z])/g, '_$1')\n            .toLowerCase()\n            .replace(/^_/, '')\n            .replace(/_+/g, '_');\n    }\n\n    function getDefaultPort(protocol) {\n        switch (protocol?.toLowerCase()) {\n        case 'mqtt':\n        case 'mqtts':\n            return 1883;\n        case 'kafka':\n        case 'kafka-secure':\n            return 9092;\n        case 'amqp':\n        case 'amqps':\n            return 5672;\n        case 'ws':\n        case 'wss':\n            return 8080;\n        case 'http':\n            return 80;\n        case 'https':\n            return 443;\n        default:\n            return 8080;\n        }\n    }\n    // Detect protocols from servers\n    const servers = asyncapi.servers();\n    const serverConfigs = [];\n\n    if (servers) {\n        Object.entries(servers).forEach(([name, server]) => {\n            const protocol = server.protocol && server.protocol();\n            if (protocol) {\n                serverConfigs.push({\n                    name,\n                    fieldName: toRustFieldName(name),\n                    typeName: toRustTypeName(name + '_config'),\n                    protocol: protocol.toLowerCase(),\n                    host: server.host && server.host(),\n                    description: server.description && server.description(),\n                    defaultPort: getDefaultPort(protocol)\n                });\n            }\n        });\n    }\n\n    return (\n        <File name=\"config.rs\">\n            {`//! Configuration management for the AsyncAPI server\n\nuse anyhow::Result;\nuse std::env;\nuse tracing::Level;\n\n/// Server configuration\n#[derive(Debug, Clone)]\npub struct Config {\n    pub host: String,\n    pub port: u16,\n    pub log_level: Level,\n    ${serverConfigs.map(server => `pub ${server.fieldName}_config: ${server.typeName},`).join('\\n    ')}\n}\n\n${serverConfigs.map(server => `\n/// Configuration for ${server.name} server\n#[derive(Debug, Clone)]\npub struct ${server.typeName} {\n    pub host: String,\n    pub port: u16,\n    pub protocol: String,\n}\n\nimpl Default for ${server.typeName} {\n    fn default() -> Self {\n        Self {\n            host: \"${server.host || 'localhost'}\".to_string(),\n            port: ${server.defaultPort},\n            protocol: \"${server.protocol}\".to_string(),\n        }\n    }\n}`).join('\\n')}\n\nimpl Config {\n    pub fn from_env() -> Result<Self> {\n        let host = env::var(\"SERVER_HOST\").unwrap_or_else(|_| \"0.0.0.0\".to_string());\n        let port = env::var(\"SERVER_PORT\")\n            .unwrap_or_else(|_| \"8080\".to_string())\n            .parse::<u16>()\n            .unwrap_or(8080);\n\n        let log_level = env::var(\"LOG_LEVEL\")\n            .unwrap_or_else(|_| \"info\".to_string())\n            .parse::<Level>()\n            .unwrap_or(Level::INFO);\n\n        Ok(Self {\n            host,\n            port,\n            log_level,\n            ${serverConfigs.map(server => `${server.fieldName}_config: ${server.typeName}::default(),`).join('\\n            ')}\n        })\n    }\n}\n`}\n        </File>\n    );\n}\n"],"names":["ConfigRs","asyncapi","toRustIdentifier","str","identifier","replace","test","rustKeywords","includes","toRustTypeName","split","map","part","charAt","toUpperCase","slice","toLowerCase","join","toRustFieldName","getDefaultPort","protocol","servers","serverConfigs","Object","entries","forEach","name","server","push","fieldName","typeName","host","description","defaultPort","_jsx","File","children"],"mappings":"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"}