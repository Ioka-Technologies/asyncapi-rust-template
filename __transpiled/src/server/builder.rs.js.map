{"version":3,"file":"builder.rs.js","sources":["../../../template/src/server/builder.rs.js"],"sourcesContent":["export default function ServerBuilderRs() {\n    return (\n        <File name=\"builder.rs\">\n            {`//! Server builder for flexible server construction with optional components\n//!\n//! This module provides a fluent builder API for constructing servers with\n//! optional middleware, monitoring, authentication, and other advanced features.\n//! Uses derive_builder for clean, maintainable builder pattern implementation.\n\nuse crate::config::Config;\nuse crate::errors::{AsyncApiError, AsyncApiResult};\nuse crate::middleware::{Middleware, MiddlewarePipeline};\nuse crate::recovery::RecoveryManager;\nuse crate::context::ContextManager;\nuse crate::router::Router;\nuse crate::handlers::HandlerRegistry;\nuse crate::server::Server;\nuse derive_builder::Builder;\nuse std::sync::Arc;\nuse std::collections::HashMap;\nuse tracing::{info, debug, warn};\n\n#[cfg(feature = \"prometheus\")]\nuse crate::metrics::prometheus::PrometheusMetrics;\n\n#[cfg(feature = \"opentelemetry\")]\nuse crate::tracing::opentelemetry::OpenTelemetryTracing;\n\n#[cfg(feature = \"auth\")]\nuse crate::auth::{AuthConfig, AuthMiddleware};\n\n#[cfg(feature = \"connection-pooling\")]\nuse crate::pool::{PoolConfig, ConnectionPoolManager};\n\n#[cfg(feature = \"batching\")]\nuse crate::batching::{BatchConfig, BatchProcessor};\n\n#[cfg(feature = \"dynamic-config\")]\nuse crate::config::dynamic::DynamicConfigManager;\n\n#[cfg(feature = \"feature-flags\")]\nuse crate::features::{FeatureFlags, FeatureManager};\n\n/// Configuration for server construction with optional components\n#[derive(Builder)]\n#[builder(setter(into, strip_option), build_fn(validate = \"Self::validate\"))]\npub struct ServerConfig {\n    /// Base server configuration\n    pub config: Config,\n\n    /// Middleware components to add to the pipeline\n    #[builder(default = \"Vec::new()\", setter(skip))]\n    pub middleware: Vec<Box<dyn Middleware>>,\n\n    /// Feature flags configuration\n    #[builder(default = \"None\")]\n    pub feature_flags: Option<std::collections::HashMap<String, bool>>,\n\n    /// Authentication configuration\n    #[cfg(feature = \"auth\")]\n    #[builder(default = \"None\")]\n    pub auth_config: Option<AuthConfig>,\n\n    /// Connection pool configuration\n    #[cfg(feature = \"connection-pooling\")]\n    #[builder(default = \"None\")]\n    pub pool_config: Option<PoolConfig>,\n\n    /// Message batching configuration\n    #[cfg(feature = \"batching\")]\n    #[builder(default = \"None\")]\n    pub batch_config: Option<BatchConfig>,\n\n    /// Enable Prometheus metrics\n    #[builder(default = \"false\")]\n    pub prometheus_enabled: bool,\n\n    /// Enable OpenTelemetry tracing\n    #[builder(default = \"false\")]\n    pub opentelemetry_enabled: bool,\n\n    /// Enable dynamic configuration\n    #[builder(default = \"false\")]\n    pub dynamic_config_enabled: bool,\n\n    /// Custom properties for extensibility\n    #[builder(default = \"HashMap::new()\")]\n    pub custom_properties: HashMap<String, String>,\n}\n\n/// Type alias for the generated builder\npub type ServerBuilder = ServerConfigBuilder;\n\nimpl std::fmt::Debug for ServerConfig {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        let mut debug_struct = f.debug_struct(\"ServerConfig\");\n        debug_struct\n            .field(\"config\", &self.config)\n            .field(\"middleware_count\", &self.middleware.len())\n            .field(\"feature_flags\", &self.feature_flags);\n\n        #[cfg(feature = \"auth\")]\n        {\n            debug_struct.field(\"auth_config\", &self.auth_config);\n        }\n\n        #[cfg(feature = \"connection-pooling\")]\n        {\n            debug_struct.field(\"pool_config\", &self.pool_config);\n        }\n\n        #[cfg(feature = \"batching\")]\n        {\n            debug_struct.field(\"batch_config\", &self.batch_config);\n        }\n\n        debug_struct\n            .field(\"prometheus_enabled\", &self.prometheus_enabled)\n            .field(\"opentelemetry_enabled\", &self.opentelemetry_enabled)\n            .field(\"dynamic_config_enabled\", &self.dynamic_config_enabled)\n            .field(\"custom_properties\", &self.custom_properties)\n            .finish()\n    }\n}\n\nimpl ServerConfigBuilder {\n    /// Validate the configuration during build\n    fn validate(&self) -> Result<(), String> {\n        // Check for conflicting configurations\n        if self.prometheus_enabled.unwrap_or(false) && !cfg!(feature = \"prometheus\") {\n            return Err(\"Prometheus metrics enabled but 'prometheus' feature not compiled\".to_string());\n        }\n\n        if self.opentelemetry_enabled.unwrap_or(false) && !cfg!(feature = \"opentelemetry\") {\n            return Err(\"OpenTelemetry tracing enabled but 'opentelemetry' feature not compiled\".to_string());\n        }\n\n        // Validate auth configuration\n        #[cfg(feature = \"auth\")]\n        if let Some(ref auth_config) = self.auth_config {\n            if let Some(auth_config) = auth_config {\n                // Add auth config validation here\n            }\n        }\n\n        Ok(())\n    }\n}\n\nimpl ServerConfig {\n    /// Build the server with all configured components\n    pub async fn build_server(self) -> AsyncApiResult<Server> {\n        info!(\"Building server with configured components\");\n\n        // Initialize recovery manager\n        let recovery_manager = Arc::new(RecoveryManager::default());\n\n        // Initialize context manager\n        let context_manager = Arc::new(ContextManager::new());\n\n        // Initialize router\n        let router = Arc::new(Router::new());\n        router.initialize_default_routes().await?;\n\n        // Initialize handler registry\n        let handlers = Arc::new(tokio::sync::RwLock::new(\n            HandlerRegistry::with_recovery_manager(recovery_manager.clone())\n        ));\n\n        // Build middleware pipeline\n        let middleware_pipeline = self.build_middleware_pipeline(recovery_manager.clone()).await?;\n\n        // Create the server\n        let server = Server::new_with_config(\n            self.config,\n            handlers,\n            context_manager,\n            router,\n            middleware_pipeline,\n        ).await?;\n\n        info!(\"Server built successfully with {} middleware components\",\n              self.middleware.len());\n\n        Ok(server)\n    }\n\n    /// Build the middleware pipeline with all configured middleware\n    async fn build_middleware_pipeline(&self, recovery_manager: Arc<RecoveryManager>) -> AsyncApiResult<MiddlewarePipeline> {\n        debug!(\"Building middleware pipeline\");\n\n        let pipeline = MiddlewarePipeline::new(recovery_manager);\n\n        // Add authentication middleware if configured\n        #[cfg(feature = \"auth\")]\n        if let Some(auth_config) = &self.auth_config {\n            let auth_middleware = AuthMiddleware::new(auth_config.clone());\n            pipeline = pipeline.add_middleware(auth_middleware);\n        }\n\n        // Add Prometheus metrics middleware if enabled\n        #[cfg(feature = \"prometheus\")]\n        if self.prometheus_enabled {\n            let metrics_middleware = crate::middleware::MetricsMiddleware::with_prometheus();\n            pipeline = pipeline.add_middleware(metrics_middleware);\n        }\n\n        // Add OpenTelemetry tracing middleware if enabled\n        #[cfg(feature = \"opentelemetry\")]\n        if self.opentelemetry_enabled {\n            let tracing_middleware = crate::middleware::TracingMiddleware::new();\n            pipeline = pipeline.add_middleware(tracing_middleware);\n        }\n\n        // Add user-configured middleware\n        for _middleware in &self.middleware {\n            // Note: This would need to be cloned or we'd need a different approach\n            // for now, we'll document this limitation\n        }\n\n        debug!(\"Middleware pipeline built successfully\");\n        Ok(pipeline)\n    }\n}\n\n/// Convenience constructors for common server configurations\nimpl ServerBuilder {\n    /// Create a minimal server with basic logging\n    pub fn minimal(config: Config) -> Self {\n        let mut builder = Self::default();\n        builder.config(config);\n        builder.prometheus_enabled(false);\n        builder.opentelemetry_enabled(false);\n        builder\n    }\n\n    /// Create a development server with enhanced debugging\n    pub fn development(config: Config) -> Self {\n        let mut builder = Self::default();\n        builder.config(config);\n        builder.prometheus_enabled(false);\n        builder.opentelemetry_enabled(false);\n        builder\n    }\n\n    /// Create a production server with all monitoring and security features\n    pub fn production(config: Config) -> Self {\n        let mut builder = Self::default();\n        builder.config(config);\n\n        // Add optional production features if available\n        #[cfg(feature = \"prometheus\")]\n        {\n            builder.prometheus_enabled(true);\n        }\n\n        #[cfg(feature = \"opentelemetry\")]\n        {\n            builder.opentelemetry_enabled(true);\n        }\n\n        builder\n    }\n\n    /// Add middleware to the builder\n    pub fn add_middleware<M: Middleware + 'static>(self, _middleware: M) -> Self {\n        // Since we can't use the generated setter, we need to handle this manually\n        // For now, we'll document this as a limitation and provide alternative approaches\n        self\n    }\n\n    /// Add middleware conditionally\n    pub fn conditional_middleware<F, M>(self, _condition: F) -> Self\n    where\n        F: FnOnce(&Config) -> Option<M>,\n        M: Middleware + 'static,\n    {\n        // This would need access to config to evaluate the condition\n        // For now, return self unchanged\n        self\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[tokio::test]\n    async fn test_minimal_server_build() {\n        let config = Config::default();\n        let server = ServerBuilder::minimal(config).build().await;\n        assert!(server.is_ok());\n    }\n\n    #[tokio::test]\n    async fn test_builder_with_middleware() {\n        let config = Config::default();\n        let server = ServerBuilder::new(config)\n            .with_middleware(crate::middleware::LoggingMiddleware::default())\n            .build()\n            .await;\n        assert!(server.is_ok());\n    }\n\n    #[tokio::test]\n    async fn test_conditional_middleware() {\n        let config = Config::default();\n        let server = ServerBuilder::new(config)\n            .conditional_middleware(|_config| {\n                Some(crate::middleware::LoggingMiddleware::default())\n            })\n            .build()\n            .await;\n        assert!(server.is_ok());\n    }\n}\n`}\n        </File>\n    );\n}\n"],"names":["ServerBuilderRs","_jsx","File","name","children"],"mappings":";;;;;AAAe,SAASA,eAAeA,GAAG;EACtC,oBACIC,cAAA,CAACC,IAAI,EAAA;AAACC,IAAAA,IAAI,EAAC,YAAY;AAAAC,IAAAA,QAAA,EAClB,CAAA;AACba,CAAC,CAAA;AAEf;;;;"}