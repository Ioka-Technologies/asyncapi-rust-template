{"version":3,"file":"main.rs.js","sources":["../../template/src/main.rs.js"],"sourcesContent":["export default function MainRs({ asyncapi, _params }) {\n    const info = asyncapi.info();\n    const title = info.title();\n\n    // Detect protocols from servers\n    const servers = asyncapi.servers();\n    const protocols = new Set();\n\n    if (servers) {\n        Object.entries(servers).forEach(([_name, server]) => {\n            const protocol = server.protocol && server.protocol();\n            if (protocol) {\n                protocols.add(protocol.toLowerCase());\n            }\n        });\n    }\n\n    return (\n        <File name=\"main.rs\">\n            {`#![allow(dead_code, unused_imports)]\n\nuse crate::errors::AsyncApiResult;\nuse tracing::{info, warn, Level};\nuse tracing_subscriber;\nuse std::env;\n\n// Import modules\nmod config;\nmod server;\nmod models;\nmod handlers;\nmod middleware;\nmod errors;\nmod recovery;\nmod transport;\nmod context;\nmod router;\n#[cfg(feature = \"auth\")]\nmod auth;\n\nuse config::Config;\nuse server::Server;\n\n#[tokio::main]\nasync fn main() -> AsyncApiResult<()> {\n    // Initialize tracing with configurable level\n    let log_level = env::var(\"LOG_LEVEL\")\n        .unwrap_or_else(|_| \"info\".to_string())\n        .parse::<Level>()\n        .unwrap_or(Level::INFO);\n\n    tracing_subscriber::fmt()\n        .with_max_level(log_level)\n        .init();\n\n    info!(\"Starting ${title} server...\");\n    info!(\"Generated from AsyncAPI specification\");\n\n    // Load configuration\n    let config = Config::from_env()?;\n    info!(\"Server configuration: {:?}\", config);\n\n    // Initialize server\n    let server = Server::new(config).await?;\n\n    // Start protocol handlers\n    server.start_http_handler().await?;\n\n    info!(\"Server started successfully!\");\n    info!(\"Press Ctrl+C to shutdown\");\n\n    // Keep the server running\n    match tokio::signal::ctrl_c().await {\n        Ok(()) => {\n            info!(\"Received shutdown signal\");\n        }\n        Err(err) => {\n            warn!(\"Unable to listen for shutdown signal: {}\", err);\n        }\n    }\n\n    info!(\"Shutting down server...\");\n    server.shutdown().await?;\n\n    Ok(())\n}\n`}\n        </File>\n    );\n}\n"],"names":["MainRs","asyncapi","_params","info","title","servers","protocols","Set","Object","entries","forEach","_name","server","protocol","add","toLowerCase","_jsx","File","name","children"],"mappings":";;;;;AAAe,SAASA,MAAMA,CAAC;EAAEC,QAAQ;AAAEC,EAAAA,OAAAA;AAAQ,CAAC,EAAE;AAClD,EAAA,MAAMC,IAAI,GAAGF,QAAQ,CAACE,IAAI,EAAE,CAAA;AAC5B,EAAA,MAAMC,KAAK,GAAGD,IAAI,CAACC,KAAK,EAAE,CAAA;;AAE1B;AACA,EAAA,MAAMC,OAAO,GAAGJ,QAAQ,CAACI,OAAO,EAAE,CAAA;AAClC,EAAA,MAAMC,SAAS,GAAG,IAAIC,GAAG,EAAE,CAAA;AAE3B,EAAA,IAAIF,OAAO,EAAE;AACTG,IAAAA,MAAM,CAACC,OAAO,CAACJ,OAAO,CAAC,CAACK,OAAO,CAAC,CAAC,CAACC,KAAK,EAAEC,MAAM,CAAC,KAAK;MACjD,MAAMC,QAAQ,GAAGD,MAAM,CAACC,QAAQ,IAAID,MAAM,CAACC,QAAQ,EAAE,CAAA;AACrD,MAAA,IAAIA,QAAQ,EAAE;QACVP,SAAS,CAACQ,GAAG,CAACD,QAAQ,CAACE,WAAW,EAAE,CAAC,CAAA;AACzC,OAAA;AACJ,KAAC,CAAC,CAAA;AACN,GAAA;EAEA,oBACIC,cAAA,CAACC,IAAI,EAAA;AAACC,IAAAA,IAAI,EAAC,SAAS;AAAAC,IAAAA,QAAA,EACf,CAAA;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAA,EAAsBf,KAAK,CAAA;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAA;AAAC,GACa,CAAC,CAAA;AAEf;;;;"}