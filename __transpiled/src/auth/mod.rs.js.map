{"version":3,"file":"mod.rs.js","sources":["../../../template/src/auth/mod.rs.js"],"sourcesContent":["export default function AuthModRs() {\n    return (\n        <File name=\"mod.rs\">\n            {`//! Authentication and authorization module\n//!\n//! This module provides JWT-based authentication, role-based access control,\n//! and middleware for securing AsyncAPI message handlers.\n\n#[cfg(feature = \"auth\")]\npub mod jwt;\n#[cfg(feature = \"auth\")]\npub mod middleware;\n#[cfg(feature = \"auth\")]\npub mod rbac;\n#[cfg(feature = \"auth\")]\npub mod config;\n\n#[cfg(feature = \"auth\")]\npub use config::AuthConfig;\n#[cfg(feature = \"auth\")]\npub use middleware::AuthMiddleware;\n#[cfg(feature = \"auth\")]\npub use jwt::{JwtValidator, Claims};\n#[cfg(feature = \"auth\")]\npub use rbac::{Role, Permission, RoleManager};\n\n#[cfg(not(feature = \"auth\"))]\npub struct AuthConfig;\n\n#[cfg(not(feature = \"auth\"))]\nimpl AuthConfig {\n    pub fn new() -> Self {\n        Self\n    }\n\n    pub fn validate(&self) -> crate::errors::AsyncApiResult<()> {\n        Ok(())\n    }\n}\n\n#[cfg(not(feature = \"auth\"))]\nimpl Clone for AuthConfig {\n    fn clone(&self) -> Self {\n        Self\n    }\n}\n`}\n        </File>\n    );\n}\n"],"names":["AuthModRs","_jsx","File","name","children"],"mappings":";;;;;AAAe,SAASA,SAASA,GAAG;EAChC,oBACIC,cAAA,CAACC,IAAI,EAAA;AAACC,IAAAA,IAAI,EAAC,QAAQ;AAAAC,IAAAA,QAAA,EACd,CAAA;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAA;AAAC,GACa,CAAC,CAAA;AAEf;;;;"}