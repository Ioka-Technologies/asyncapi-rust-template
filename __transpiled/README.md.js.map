{"version":3,"file":"README.md.js","sources":["../template/README.md.js"],"sourcesContent":["export default function ReadmeMd({ asyncapi }) {\n    const info = asyncapi.info();\n    const title = info.title();\n\n    // Detect protocols from servers\n    const servers = asyncapi.servers();\n    const protocols = new Set();\n    const serverConfigs = [];\n\n    if (servers) {\n        Object.entries(servers).forEach(([name, server]) => {\n            const protocol = server.protocol && server.protocol();\n            if (protocol) {\n                protocols.add(protocol.toLowerCase());\n                serverConfigs.push({\n                    name,\n                    protocol: protocol.toLowerCase(),\n                    host: server.host && server.host(),\n                    description: server.description && server.description()\n                });\n            }\n        });\n    }\n\n    // Extract channels and their operations\n    const channels = asyncapi.channels();\n    const channelData = [];\n    const messageTypes = new Set();\n\n    if (channels) {\n        Object.entries(channels).forEach(([channelName, channel]) => {\n            const operations = channel.operations && channel.operations();\n            const channelOps = [];\n\n            if (operations) {\n                Object.entries(operations).forEach(([opName, operation]) => {\n                    const action = operation.action && operation.action();\n                    const messages = operation.messages && operation.messages();\n\n                    if (messages) {\n                        messages.forEach(message => {\n                            const messageName = message.name && message.name();\n                            if (messageName) {\n                                messageTypes.add(messageName);\n                            }\n                        });\n                    }\n\n                    channelOps.push({\n                        name: opName,\n                        action,\n                        messages: messages || []\n                    });\n                });\n            }\n\n            channelData.push({\n                name: channelName,\n                address: channel.address && channel.address(),\n                description: channel.description && channel.description(),\n                operations: channelOps\n            });\n        });\n    }\n\n    return (\n        <File name=\"README.md\">\n            {`# ${title}\n\nThis is a Rust AsyncAPI server generated from the AsyncAPI specification.\n\n## Features\n\n- Async/await support with Tokio\n- Structured logging with tracing\n- Protocol support: ${Array.from(protocols).join(', ') || 'generic'}\n- Type-safe message handling\n- Generated message models\n- Channel-based operation handlers\n- Configuration management\n- Error handling and middleware\n\n## Generated Components\n\n### Servers\n${serverConfigs.map(server => `- **${server.name}**: ${server.protocol}://${server.host} - ${server.description || 'No description'}`).join('\\n')}\n\n### Channels\n${channelData.map(channel => `- **${channel.name}**: ${channel.address || channel.name} - ${channel.description || 'No description'}`).join('\\n')}\n\n### Message Types\n${Array.from(messageTypes).map(type => `- ${type}`).join('\\n')}\n\n## Usage\n\n\\`\\`\\`bash\n# Build the project\ncargo build\n\n# Run the server\ncargo run\n\n# Run tests\ncargo test\n\n# Run with custom configuration\nLOG_LEVEL=debug SERVER_HOST=localhost cargo run\n\\`\\`\\`\n\n## Configuration\n\nThe server can be configured through environment variables:\n\n- \\`LOG_LEVEL\\`: Set logging level (trace, debug, info, warn, error)\n- \\`SERVER_HOST\\`: Server host (default: 0.0.0.0)\n- \\`SERVER_PORT\\`: Server port (default: 8080)\n\n## Generated from AsyncAPI\n\nThis server was generated from an AsyncAPI specification. The original spec defines:\n\n- **Title**: ${title}\n- **Version**: ${info.version() || '1.0.0'}\n- **Description**: ${info.description() || 'No description provided'}\n- **Protocols**: ${Array.from(protocols).join(', ') || 'generic'}\n`}\n        </File>\n    );\n}\n"],"names":["ReadmeMd","asyncapi","info","title","servers","protocols","Set","serverConfigs","Object","entries","forEach","name","server","protocol","add","toLowerCase","push","host","description","channels","channelData","messageTypes","channelName","channel","operations","channelOps","opName","operation","action","messages","message","messageName","address","_jsx","File","children","Array","from","join","map","type","version"],"mappings":"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"}